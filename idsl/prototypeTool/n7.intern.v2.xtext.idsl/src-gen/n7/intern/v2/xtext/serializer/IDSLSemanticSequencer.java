/*
 * generated by Xtext 2.25.0.M1
 */
package n7.intern.v2.xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import n7.intern.v2.iDSL.Component;
import n7.intern.v2.iDSL.Connection;
import n7.intern.v2.iDSL.Data;
import n7.intern.v2.iDSL.DataProcessor;
import n7.intern.v2.iDSL.DataProvider;
import n7.intern.v2.iDSL.DataType;
import n7.intern.v2.iDSL.IDSLPackage;
import n7.intern.v2.iDSL.IoTFramework;
import n7.intern.v2.iDSL.Output;
import n7.intern.v2.xtext.services.IDSLGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class IDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private IDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == IDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case IDSLPackage.COMPONENT:
				sequence_Component_Impl(context, (Component) semanticObject); 
				return; 
			case IDSLPackage.CONNECTION:
				sequence_Connection(context, (Connection) semanticObject); 
				return; 
			case IDSLPackage.DATA:
				sequence_Data(context, (Data) semanticObject); 
				return; 
			case IDSLPackage.DATA_PROCESSOR:
				sequence_DataProcessor(context, (DataProcessor) semanticObject); 
				return; 
			case IDSLPackage.DATA_PROVIDER:
				sequence_DataProvider(context, (DataProvider) semanticObject); 
				return; 
			case IDSLPackage.DATA_TYPE:
				sequence_DataType(context, (DataType) semanticObject); 
				return; 
			case IDSLPackage.IO_TFRAMEWORK:
				sequence_IoTFramework(context, (IoTFramework) semanticObject); 
				return; 
			case IDSLPackage.OUTPUT:
				sequence_Output(context, (Output) semanticObject); 
				return; 
			case IDSLPackage.PARAMETER:
				sequence_Parameter(context, (n7.intern.v2.iDSL.Parameter) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Component returns Component
	 *     Component_Impl returns Component
	 *
	 * Constraint:
	 *     (name=EString samplingRate=EInt? (data+=Data data+=Data*)?)
	 */
	protected void sequence_Component_Impl(ISerializationContext context, Component semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Connection returns Connection
	 *
	 * Constraint:
	 *     (name=EString description=EString? (parameters+=Parameter parameters+=Parameter*)?)
	 */
	protected void sequence_Connection(ISerializationContext context, Connection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Component returns DataProcessor
	 *     DataProcessor returns DataProcessor
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         samplingRate=EInt? 
	 *         (dataProviders+=[DataProvider|EString] dataProviders+=[DataProvider|EString]*)? 
	 *         (outputs+=[Output|EString] outputs+=[Output|EString]*)? 
	 *         (data+=Data data+=Data*)?
	 *     )
	 */
	protected void sequence_DataProcessor(ISerializationContext context, DataProcessor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Component returns DataProvider
	 *     DataProvider returns DataProvider
	 *
	 * Constraint:
	 *     (name=EString samplingRate=EInt? (data+=Data data+=Data*)? (connections+=Connection connections+=Connection*)?)
	 */
	protected void sequence_DataProvider(ISerializationContext context, DataProvider semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DataType returns DataType
	 *
	 * Constraint:
	 *     (name=EString type=Type)
	 */
	protected void sequence_DataType(ISerializationContext context, DataType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, IDSLPackage.Literals.DATA_TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IDSLPackage.Literals.DATA_TYPE__NAME));
			if (transientValues.isValueTransient(semanticObject, IDSLPackage.Literals.DATA_TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IDSLPackage.Literals.DATA_TYPE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDataTypeAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDataTypeAccess().getTypeTypeEnumRuleCall_3_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Data returns Data
	 *
	 * Constraint:
	 *     (name=EString (dataTypes+=DataType dataTypes+=DataType*)? (data+=Data data+=Data*)?)
	 */
	protected void sequence_Data(ISerializationContext context, Data semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IoTFramework returns IoTFramework
	 *
	 * Constraint:
	 *     (name=EString description=EString? (components+=Component components+=Component*)? (outputs+=Output outputs+=Output*)?)
	 */
	protected void sequence_IoTFramework(ISerializationContext context, IoTFramework semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Output returns Output
	 *
	 * Constraint:
	 *     (name=EString description=EString? (parameters+=Parameter parameters+=Parameter*)?)
	 */
	protected void sequence_Output(ISerializationContext context, Output semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     (name=EString content=EString?)
	 */
	protected void sequence_Parameter(ISerializationContext context, n7.intern.v2.iDSL.Parameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
